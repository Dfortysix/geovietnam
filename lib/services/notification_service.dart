import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:flutter/material.dart';
import 'settings_service.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  bool _initialized = false;
  static const String _tz = 'Asia/Ho_Chi_Minh';

  Future<void> init() async {
    if (_initialized) return;
    print('üîî NotificationService: Kh·ªüi t·∫°o (awesome_notifications)...');

    await AwesomeNotifications().initialize(
      null,
      [
        NotificationChannel(
          channelKey: 'daily_channel',
          channelName: 'Daily Reminders',
          channelDescription: 'Nh·∫Øc Daily Challenge v√† streak',
          importance: NotificationImportance.Max,
          defaultColor: const Color(0xFF2196F3),
          ledColor: const Color(0xFFFFFFFF),
          playSound: true,
          enableVibration: true,
          channelShowBadge: true,
        ),

      ],
      debug: false,
    );

    bool allowed = await AwesomeNotifications().isNotificationAllowed();
    print('üîî NotificationService: isNotificationAllowed = $allowed');
    if (!allowed) {
      allowed = await AwesomeNotifications().requestPermissionToSendNotifications();
      print('üîî NotificationService: requestPermission -> $allowed');
    }

    _initialized = true;
    print('üîî NotificationService: Kh·ªüi t·∫°o th√†nh c√¥ng (awesome_notifications)');
  }

  Future<void> scheduleDailyReminders() async {
    print('üîî NotificationService: B·∫Øt ƒë·∫ßu l·∫≠p l·ªãch th√¥ng b√°o (awesome)');

    if (!await SettingsService().isNotificationsEnabled()) {
      print('üîî NotificationService: Th√¥ng b√°o b·ªã t·∫Øt, h·ªßy t·∫•t c·∫£');
      await cancelAll();
      return;
    }

    print('üîî NotificationService: Th√¥ng b√°o ƒë∆∞·ª£c b·∫≠t, l·∫≠p l·ªãch...');
    await cancelAll();

    // L·∫≠p l·ªãch th√¥ng b√°o h√†ng ng√†y
    await _scheduleDaily(
      id: 1001,
      hour: 19,
      minute: 0,
      title: 'Daily Challenge ƒëang ch·ªù b·∫°n!',
      body: 'V√†o ch∆°i ƒë·ªÉ duy tr√¨ streak h√¥m nay nh√©.',
      channelKey: 'daily_channel',
    );

    await _scheduleDaily(
      id: 1002,
      hour: 22,
      minute: 0,
      title: 'S·∫Øp m·∫•t streak!',
      body: 'B·∫°n c√≤n 2 gi·ªù ƒë·ªÉ ho√†n th√†nh th·ª≠ th√°ch h√¥m nay.',
      channelKey: 'daily_channel',
    );



    print('üîî NotificationService: Ho√†n th√†nh l·∫≠p l·ªãch th√¥ng b√°o');
  }

  Future<void> cancelAll() async {
    await AwesomeNotifications().cancelAllSchedules();
    await AwesomeNotifications().cancelAll();
  }



  Future<void> _scheduleDaily({
    required int id,
    required int hour,
    required int minute,
    required String title,
    required String body,
    required String channelKey,
  }) async {
    print('üîî NotificationService: L·∫≠p l·ªãch ID $id l√∫c $hour:$minute (awesome)');
    try {
      // T√≠nh th·ªùi gian c·ª• th·ªÉ cho notification
      final now = DateTime.now();
      DateTime fireDate = DateTime(now.year, now.month, now.day, hour, minute);
      
      // N·∫øu th·ªùi gian ƒë√£ qua h√¥m nay, ƒë·∫∑t cho ng√†y mai
      if (fireDate.isBefore(now)) {
        fireDate = fireDate.add(const Duration(days: 1));
      }
      
      await AwesomeNotifications().createNotification(
        content: NotificationContent(
          id: id,
          channelKey: channelKey,
          title: title,
          body: body,
          category: NotificationCategory.Reminder,
          wakeUpScreen: true,
        ),
        schedule: NotificationCalendar.fromDate(
          date: fireDate,
          preciseAlarm: true,
          allowWhileIdle: true,
          repeats: true,
        ),
      );
      print('üîî NotificationService: L·∫≠p l·ªãch th√†nh c√¥ng cho ID $id');
    } catch (e) {
      print('üîî NotificationService: L·ªói l·∫≠p l·ªãch ID $id: $e');
    }
  }
}
