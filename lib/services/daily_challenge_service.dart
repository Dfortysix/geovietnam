import 'dart:convert';
import 'dart:math';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/province.dart';
import '../data/provinces_data.dart';
import 'game_progress_service.dart';
import 'auth_service.dart';

class DailyChallengeService {
  static const String _dailyChallengeDateKey = 'daily_challenge_date';
  static const String _dailyChallengeAttemptsKey = 'daily_challenge_attempts';
  static const String _dailyChallengeProvinceKey = 'daily_challenge_province';
  static const String _dailyChallengeCurrentQuestionKey = 'daily_challenge_current_question';
  static const String _dailyChallengeScoreKey = 'daily_challenge_score';
  static const String _dailyChallengeQuestionsKey = 'daily_challenge_questions';
  static const String _dailyChallengeSelectedAnswerKey = 'daily_challenge_selected_answer';
  static const String _dailyChallengeShowResultKey = 'daily_challenge_show_result';
  static const String _dailyChallengeIsCorrectKey = 'daily_challenge_is_correct';
  static const String _dailyChallengeTimeRemainingKey = 'daily_challenge_time_remaining';
  static const int _maxAttemptsPerDay = 3;

  // L·∫•y key v·ªõi user ID ƒë·ªÉ ph√¢n bi·ªát theo t·ª´ng t√†i kho·∫£n
  static String _getUserKey(String baseKey) {
    final authService = AuthService();
    final user = authService.currentUser;
    final googleUser = authService.currentGoogleUser;
    
    // S·ª≠ d·ª•ng Firebase UID n·∫øu c√≥, ho·∫∑c Google ID, ho·∫∑c fallback
    String userId;
    if (user?.uid != null) {
      userId = user!.uid;
    } else if (googleUser?.id != null) {
      userId = googleUser!.id;
    } else {
      userId = 'anonymous_user';
    }
    
    return '${userId}_$baseKey';
  }

  // L·∫•y th√¥ng tin daily challenge hi·ªán t·∫°i
  static Future<Map<String, dynamic>> getCurrentDailyChallenge() async {
    final prefs = await SharedPreferences.getInstance();
    final today = DateTime.now();
    final todayString = '${today.year}-${today.month.toString().padLeft(2, '0')}-${today.day.toString().padLeft(2, '0')}';
    
    final lastChallengeDate = prefs.getString(_getUserKey(_dailyChallengeDateKey));
    final attempts = prefs.getInt(_getUserKey(_dailyChallengeAttemptsKey)) ?? 0;
    final selectedProvinceId = prefs.getString(_getUserKey(_dailyChallengeProvinceKey));
    final isProvinceUnlockedToday = prefs.getBool(_getUserKey('province_unlocked_today')) ?? false;
    
         // N·∫øu l√† ng√†y m·ªõi, reset daily challenge
     if (lastChallengeDate != todayString) {
       await _resetDailyChallenge(todayString);
       
               // Ki·ªÉm tra xem c√≥ t·ªânh ƒë∆∞·ª£c ch·ªçn kh√¥ng sau khi reset
        final currentProvinceId = prefs.getString(_getUserKey(_dailyChallengeProvinceKey));
       Province selectedProvince;
       
                       if (currentProvinceId != null) {
           // N·∫øu c√≥ t·ªânh ƒë∆∞·ª£c ch·ªçn, t√¨m t·ªânh ƒë√≥ trong game progress
           final progress = await GameProgressService.getCurrentProgress();
           final existingProvince = progress.provinces.firstWhere(
             (p) => p.id == currentProvinceId,
             orElse: () => Province(
               id: currentProvinceId,
               name: currentProvinceId,
               nameVietnamese: currentProvinceId,
               description: 'T·ªânh',
               facts: [],
               isUnlocked: false,
             ),
           );
           selectedProvince = existingProvince;
        } else {
          // N·∫øu kh√¥ng c√≥ t·ªânh ƒë∆∞·ª£c ch·ªçn, ch·ªçn t·ªânh m·ªõi
          selectedProvince = await _selectRandomProvince();
        }
       
       return {
         'date': todayString,
         'attempts': 0,
         'maxAttempts': _maxAttemptsPerDay,
         'canPlay': true,
         'selectedProvince': selectedProvince,
       };
     }
    
         // Ki·ªÉm tra xem c√≤n c√≥ th·ªÉ ch∆°i kh√¥ng
     final canPlay = attempts < _maxAttemptsPerDay && !isProvinceUnlockedToday;
    
                      // T√¨m t·ªânh ƒë∆∞·ª£c ch·ªçn t·ª´ game progress
       Province? selectedProvince;
       if (selectedProvinceId != null) {
         final progress = await GameProgressService.getCurrentProgress();
         final existingProvince = progress.provinces.firstWhere(
           (p) => p.id == selectedProvinceId,
           orElse: () => Province(
             id: selectedProvinceId,
             name: selectedProvinceId,
             nameVietnamese: selectedProvinceId,
             description: 'T·ªânh',
             facts: [],
             isUnlocked: false,
           ),
         );
         selectedProvince = existingProvince;
       }
     
     return {
       'date': lastChallengeDate ?? todayString,
       'attempts': attempts,
       'maxAttempts': _maxAttemptsPerDay,
       'canPlay': canPlay,
       'selectedProvince': selectedProvince,
       'isProvinceUnlockedToday': isProvinceUnlockedToday,
     };
  }

  // Reset daily challenge cho ng√†y m·ªõi
  static Future<void> _resetDailyChallenge(String todayString) async {
    print('üîÑ B·∫Øt ƒë·∫ßu reset daily challenge cho ng√†y: $todayString');
    final prefs = await SharedPreferences.getInstance();
    final previousProvinceId = prefs.getString(_getUserKey(_dailyChallengeProvinceKey));
    
    // Ki·ªÉm tra xem t·ªânh tr∆∞·ªõc ƒë√≥ ƒë√£ ƒë∆∞·ª£c unlock ch∆∞a
    bool shouldChangeProvince = true;
    if (previousProvinceId != null) {
      final progress = await GameProgressService.getCurrentProgress();
      final previousProvince = progress.provinces.firstWhere(
        (p) => p.id == previousProvinceId,
        orElse: () => progress.provinces.first,
      );
      
      // N·∫øu t·ªânh tr∆∞·ªõc ƒë√≥ ch∆∞a ƒë∆∞·ª£c unlock, gi·ªØ nguy√™n
      if (!previousProvince.isUnlocked) {
        shouldChangeProvince = false;
        print('üìç Gi·ªØ nguy√™n t·ªânh $previousProvinceId v√¨ ch∆∞a unlock');
      } else {
        print('üìç T·ªânh $previousProvinceId ƒë√£ unlock, s·∫Ω ch·ªçn t·ªânh m·ªõi');
      }
    }
    
    await prefs.setString(_getUserKey(_dailyChallengeDateKey), todayString);
    await prefs.setInt(_getUserKey(_dailyChallengeAttemptsKey), 0);
    await prefs.setBool(_getUserKey('province_unlocked_today'), false); // Reset tr·∫°ng th√°i unlock
    
    // X√≥a tr·∫°ng th√°i ch∆°i c≈© khi reset daily challenge
    await clearSavedGameState();
    print('üóëÔ∏è ƒê√£ x√≥a tr·∫°ng th√°i ch∆°i c≈©');
    
    // Ch·ªâ ch·ªçn t·ªânh m·ªõi n·∫øu t·ªânh tr∆∞·ªõc ƒë√£ ƒë∆∞·ª£c unlock
    if (shouldChangeProvince) {
      await prefs.remove(_getUserKey(_dailyChallengeProvinceKey));
      print('üîÑ ƒê√£ x√≥a t·ªânh c≈©, s·∫Ω ch·ªçn t·ªânh m·ªõi');
    } else {
      print('üîÑ Gi·ªØ nguy√™n t·ªânh c≈©: $previousProvinceId');
    }
  }

  // Ch·ªçn t·ªânh random cho daily challenge (ch·ªâ t·ª´ c√°c t·ªânh ch∆∞a m·ªü kh√≥a)
  static Future<Province> _selectRandomProvince() async {
    // L·∫•y danh s√°ch t·∫•t c·∫£ t·ªânh t·ª´ game progress
    final progress = await GameProgressService.getCurrentProgress();
    
    // L·ªçc ra c√°c t·ªânh ch∆∞a ƒë∆∞·ª£c unlock v√† c√≥ s·∫µn file questions
    final unlockedProvinces = progress.provinces.where((province) => 
      !province.isUnlocked && 
      _hasQuestionsFile(province.id)
    ).toList();
    
         // N·∫øu kh√¥ng c√≥ t·ªânh n√†o ch∆∞a unlock, l·∫•y t·∫•t c·∫£ t·ªânh c√≥ questions t·ª´ game progress
     if (unlockedProvinces.isEmpty) {
       // L·ªçc ra t·∫•t c·∫£ t·ªânh c√≥ questions t·ª´ game progress
       final allProvincesWithQuestions = progress.provinces.where((province) => 
         _hasQuestionsFile(province.id)
       ).toList();
       
       if (allProvincesWithQuestions.isNotEmpty) {
         final random = Random();
         final selectedProvince = allProvincesWithQuestions[random.nextInt(allProvincesWithQuestions.length)];
         
         // L∆∞u t·ªânh ƒë∆∞·ª£c ch·ªçn
         final prefs = await SharedPreferences.getInstance();
         await prefs.setString(_getUserKey(_dailyChallengeProvinceKey), selectedProvince.id);
         
         return selectedProvince;
       }
       
       // Fallback: n·∫øu kh√¥ng c√≥ t·ªânh n√†o trong game progress, t·∫°o t·ªânh m·∫∑c ƒë·ªãnh
       final defaultProvince = Province(
         id: 'Ha Noi',
         name: 'Ha Noi',
         nameVietnamese: 'H√† N·ªôi',
         description: 'Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam',
         facts: [],
         isUnlocked: false,
       );
       
       final prefs = await SharedPreferences.getInstance();
       await prefs.setString(_getUserKey(_dailyChallengeProvinceKey), defaultProvince.id);
       
       return defaultProvince;
     }
    
    // Random t·ª´ danh s√°ch t·ªânh ch∆∞a unlock
    final random = Random();
    final selectedProvince = unlockedProvinces[random.nextInt(unlockedProvinces.length)];
    
    // L∆∞u t·ªânh ƒë∆∞·ª£c ch·ªçn
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_getUserKey(_dailyChallengeProvinceKey), selectedProvince.id);
    
    return selectedProvince;
  }
  
  // Ki·ªÉm tra xem t·ªânh c√≥ file questions kh√¥ng
  static bool _hasQuestionsFile(String provinceId) {
    final availableProvinces = [
      'An Giang', 'Bac Ninh', 'Ca Mau', 'Can Tho', 'Cao Bang', 'Da Nang',
      'Dak Lak', 'Dien Bien', 'Dong Nai', 'Dong Thap', 'Gia Lai', 'Ha Noi',
      'Ha Tinh', 'Hai Phong', 'Ho Chi Minh', 'Hue', 'Hung Yen', 'Khanh Hoa',
      'Lai Chau', 'Lam Dong', 'Lang Son', 'Lao Cai', 'Nghe An', 'Ninh Binh',
      'Phu Tho', 'Quang Ngai', 'Quang Ninh', 'Quang Tri', 'Son La', 'Tay Ninh',
      'Thai Nguyen', 'Thanh Hoa', 'Tuyen Quang', 'Vinh Long'
    ];
    return availableProvinces.contains(provinceId);
  }

  // TƒÉng s·ªë l·∫ßn th·ª≠
  static Future<void> incrementAttempts() async {
    final prefs = await SharedPreferences.getInstance();
    final attempts = prefs.getInt(_getUserKey(_dailyChallengeAttemptsKey)) ?? 0;
    await prefs.setInt(_getUserKey(_dailyChallengeAttemptsKey), attempts + 1);
  }

  // ƒê√°nh d·∫•u t·ªânh ƒë√£ ƒë∆∞·ª£c unlock h√¥m nay
  static Future<void> markProvinceUnlockedToday() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_getUserKey('province_unlocked_today'), true);
  }

  // Load c√¢u h·ªèi cho t·ªânh ƒë∆∞·ª£c ch·ªçn
  static Future<List<Map<String, dynamic>>> loadQuestionsForProvince(String provinceId) async {
    try {
      // T√™n file theo quy t·∫Øc snake_case: v√≠ d·ª• 'Ha Noi' -> 'ha_noi.json'
      final fileName = '${provinceId.toLowerCase().replaceAll(' ', '_')}.json';
      
      print('Loading questions for province: $provinceId, file: $fileName');
      final jsonString = await rootBundle.loadString('assets/data/questions/$fileName');
      final List<dynamic> jsonList = json.decode(jsonString);
      
      // Chuy·ªÉn ƒë·ªïi th√†nh List<Map<String, dynamic>>
      return jsonList.map((item) => Map<String, dynamic>.from(item)).toList();
    } catch (e) {
      print('Error loading questions for province $provinceId: $e');
      // N·∫øu kh√¥ng t√¨m th·∫•y file, tr·∫£ v·ªÅ c√¢u h·ªèi m·∫∑c ƒë·ªãnh
      return _getDefaultQuestions();
    }
  }

  // C√¢u h·ªèi m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y file
  static List<Map<String, dynamic>> _getDefaultQuestions() {
    return [
      {
        "id": "default_001",
        "type": "text",
        "question": "Vi·ªát Nam c√≥ bao nhi√™u t·ªânh th√†nh?",
        "options": ["61", "62", "63", "64"],
        "answer": 2
      },
      {
        "id": "default_002",
        "type": "text",
        "question": "Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√†?",
        "options": ["H√† N·ªôi", "TP. H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "Hu·∫ø"],
        "answer": 0
      },
      {
        "id": "default_003",
        "type": "text",
        "question": "Vi·ªát Nam c√≥ ƒë∆∞·ªùng b·ªù bi·ªÉn d√†i kho·∫£ng bao nhi√™u km?",
        "options": ["2,000 km", "3,260 km", "4,000 km", "5,000 km"],
        "answer": 1
      },
      {
        "id": "default_004",
        "type": "text",
        "question": "S√¥ng n√†o d√†i nh·∫•t Vi·ªát Nam?",
        "options": ["S√¥ng H·ªìng", "S√¥ng Mekong", "S√¥ng ƒê·ªìng Nai", "S√¥ng C·ª≠u Long"],
        "answer": 1
      },
      {
        "id": "default_005",
        "type": "text",
        "question": "N√∫i n√†o cao nh·∫•t Vi·ªát Nam?",
        "options": ["Fansipan", "B√† ƒêen", "Lang Biang", "B·∫°ch M√£"],
        "answer": 0
      },
      {
        "id": "default_006",
        "type": "text",
        "question": "Vi·ªát Nam c√≥ chung bi√™n gi·ªõi v·ªõi bao nhi√™u qu·ªëc gia?",
        "options": ["2", "3", "4", "5"],
        "answer": 1
      },
      {
        "id": "default_007",
        "type": "text",
        "question": "ƒê·ªìng b·∫±ng s√¥ng C·ª≠u Long c√≥ bao nhi√™u t·ªânh th√†nh?",
        "options": ["10", "11", "12", "13"],
        "answer": 2
      }
    ];
  }

  // Ki·ªÉm tra xem c√≥ th·ªÉ ch∆°i daily challenge kh√¥ng
  static Future<bool> canPlayDailyChallenge() async {
    final challenge = await getCurrentDailyChallenge();
    return challenge['canPlay'] as bool;
  }

  // L·∫•y s·ªë l·∫ßn th·ª≠ c√≤n l·∫°i
  static Future<int> getRemainingAttempts() async {
    final challenge = await getCurrentDailyChallenge();
    return _maxAttemptsPerDay - (challenge['attempts'] as int);
  }

  // L∆∞u tr·∫°ng th√°i ch∆°i hi·ªán t·∫°i
  static Future<void> saveGameState({
    required int currentQuestion,
    required int score,
    required List<Map<String, dynamic>> questions,
  }) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt(_getUserKey(_dailyChallengeCurrentQuestionKey), currentQuestion);
      await prefs.setInt(_getUserKey(_dailyChallengeScoreKey), score);
      await prefs.setString(_getUserKey(_dailyChallengeQuestionsKey), json.encode(questions));
      print('‚úÖ ƒê√£ l∆∞u tr·∫°ng th√°i: c√¢u $currentQuestion, ƒëi·ªÉm $score');
    } catch (e) {
      print('‚ùå L·ªói khi l∆∞u tr·∫°ng th√°i: $e');
    }
  }

  // L·∫•y tr·∫°ng th√°i ch∆°i ƒë√£ l∆∞u
  static Future<Map<String, dynamic>> getSavedGameState() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final currentQuestion = prefs.getInt(_getUserKey(_dailyChallengeCurrentQuestionKey)) ?? 0;
      final score = prefs.getInt(_getUserKey(_dailyChallengeScoreKey)) ?? 0;
      final questionsString = prefs.getString(_getUserKey(_dailyChallengeQuestionsKey));

      List<Map<String, dynamic>> questions = [];
      if (questionsString != null) {
        try {
          final List<dynamic> questionsList = json.decode(questionsString);
          questions = questionsList.map((item) => Map<String, dynamic>.from(item)).toList();
        } catch (e) {
          print('Error parsing saved questions: $e');
        }
      }

      print('üìñ ƒê√£ kh√¥i ph·ª•c tr·∫°ng th√°i: c√¢u $currentQuestion, ƒëi·ªÉm $score');
      return {
        'currentQuestion': currentQuestion,
        'score': score,
        'questions': questions,
      };
    } catch (e) {
      print('‚ùå L·ªói khi kh√¥i ph·ª•c tr·∫°ng th√°i: $e');
      return {
        'currentQuestion': 0,
        'score': 0,
        'questions': [],
      };
    }
  }

  // X√≥a tr·∫°ng th√°i ch∆°i ƒë√£ l∆∞u
  static Future<void> clearSavedGameState() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_getUserKey(_dailyChallengeCurrentQuestionKey));
    await prefs.remove(_getUserKey(_dailyChallengeScoreKey));
    await prefs.remove(_getUserKey(_dailyChallengeQuestionsKey));
  }

  // Ki·ªÉm tra xem c√≥ tr·∫°ng th√°i ch∆°i ƒë√£ l∆∞u kh√¥ng
  static Future<bool> hasSavedGameState() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final hasState = prefs.containsKey(_getUserKey(_dailyChallengeCurrentQuestionKey));
      final currentQuestion = prefs.getInt(_getUserKey(_dailyChallengeCurrentQuestionKey));
      final score = prefs.getInt(_getUserKey(_dailyChallengeScoreKey));
      print('üîç Ki·ªÉm tra tr·∫°ng th√°i ƒë√£ l∆∞u: $hasState (c√¢u: $currentQuestion, ƒëi·ªÉm: $score)');
      return hasState;
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i: $e');
      return false;
    }
  }

  // Debug: In ra t·∫•t c·∫£ SharedPreferences keys
  static Future<void> debugSharedPreferences() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();
      print('üîç T·∫•t c·∫£ SharedPreferences keys:');
      for (final key in keys) {
        if (key.contains('daily_challenge')) {
          final value = prefs.get(key);
          print('  $key: $value');
        }
      }
      print('üë§ User-specific keys:');
      final authService = AuthService();
      final user = authService.currentUser;
      final googleUser = authService.currentGoogleUser;
      
      String userId;
      if (user?.uid != null) {
        userId = user!.uid;
      } else if (googleUser?.id != null) {
        userId = googleUser!.id;
      } else {
        userId = 'anonymous_user';
      }
      
      for (final key in keys) {
        if (key.startsWith('${userId}_daily_challenge')) {
          final value = prefs.get(key);
          print('  $key: $value');
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi debug SharedPreferences: $e');
    }
  }

  // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu daily challenge c·ªßa user hi·ªán t·∫°i (khi ƒëƒÉng xu·∫•t)
  static Future<void> clearAllUserData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final keys = prefs.getKeys();
      
      final authService = AuthService();
      final user = authService.currentUser;
      final googleUser = authService.currentGoogleUser;
      
      String userId;
      if (user?.uid != null) {
        userId = user!.uid;
      } else if (googleUser?.id != null) {
        userId = googleUser!.id;
      } else {
        userId = 'anonymous_user';
      }
      
      int removedCount = 0;
      for (final key in keys) {
        if (key.startsWith('${userId}_daily_challenge')) {
          await prefs.remove(key);
          removedCount++;
        }
      }
      
      print('üóëÔ∏è ƒê√£ x√≥a $removedCount keys daily challenge c·ªßa user $userId');
    } catch (e) {
      print('‚ùå L·ªói khi x√≥a d·ªØ li·ªáu user: $e');
    }
  }
} 